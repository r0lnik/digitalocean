
# - name: Added a consultant whose account you want to expire
#   user:
#     name: rolnik
#     groups: wheel
#     #expires: 1422403387
#     #shell: /bin/zsh
# - name: Add grpups
#   group: 
#     name: tech_awx
#     state: present



- name: Add several users
  ansible.builtin.user:
    name: {{ username }}
    state: present
    groups: {{ groups }}
    append: yes
  # loop:
  #   - tech_awx
  #   - wheel
  tags:
    - user_mgmt




- name: add sudoers line
  lineinfile:
    path: /etc/sudoers
    state: present
    #egexp: '^%sudo'
    line: '{{  sudoer  }} ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
    backup: yes
  tags:
    - sudoers

- name: remove sudoers line
  lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: '^%tech-awx'
    line: '%tech-awx ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
    backup: yes
  tags:
    - sudoers


- name: sudoers line
  lineinfile:
    dest: '/etc/ssh/sshd_config'
    regexp: '^PermitRootLogin'
    line: "PermitRootLogin no"
    state: present
    backup: yes
  notify:
    - restart ssh
  tags:
    - sshdcfg

- name: Set authorized key, removing all the authorized keys already set
  authorized_key:
    user: rolnik
    key: '{{ item }}'
    state: present
    exclusive: True
  with_file:
    - pubkeys/rolnik
  tags:
    - sshdcfg






 # install and configure modules
# - name: (Rocky Linux 8) Install EPEL & ELRepo repository
#   yum:
#     name:
#       - epel-release
#       - elrepo-release
#     update_cache: true

# - name: (Rocky Linux 8) Ensure WireGuard DKMS package is removed
#   yum:
#     name:
#       - "wireguard-dkms"
#     state: absent

# - name: (Rocky Linux 8) Install WireGuard packages
#   yum:
#     name:
#       - "kmod-wireguard"
#       - "wireguard-tools"
#     state: present

# #key check and generation
# - name: Test if private key is already present
#   stat:
#     path: "{{ wireguard_privatekey_path }}"
#   register: _priv_key

# - name: Generate WireGuard private and public keys
#   shell: |
#     set -o pipefail
#     umask 077 && wg genkey | tee {{ wireguard_privatekey_path }} | wg pubkey > {{ wireguard_publickey_path }}
#   args:
#     executable: /bin/bash
#   when: not _priv_key.stat.exists

# - name: Read publickey
#   slurp:
#     src: "{{ wireguard_publickey_path }}"
#   register: _pubkey_value

# - name: Read privatekey
#   slurp:
#     src: "{{ wireguard_privatekey_path }}"
#   register: _privkey_value

# - name: Test if preshared key is already present
#   stat:
#     path: "{{ wireguard_presharedkey_path }}"
#   register: _psk_key

# - name: Generate WireGuard preshared key
#   shell: |
#     set -o pipefail
#     umask 077 && wg genpsk | tee {{ wireguard_presharedkey_path }}
#   args:
#     executable: /bin/bash
#   when: not _psk_key.stat.exists

# - name: Read presharedkey
#   slurp:
#     src: "{{ wireguard_presharedkey_path }}"
#   register: _pskkey_value

# - name: Create peers variable from template
#   set_fact:
#     peers: "{{ lookup('template', 'templates/peers.j2') | from_yaml }}"

# - name: Setup ipv4 IP forward
#   sysctl:
#     name: net.ipv4.ip_forward
#     value: 1
#     sysctl_set: true
#     state: present
#     reload: true

# - name: Create WireGuard configuration directory
#   file:
#     dest: "{{ wireguard_dir }}"
#     state: directory
#     mode: 0700
#   tags:
#     - wg-config

# - name: Generate WireGuard configuration file
#   template:
#     src: etc/wireguard/wg.conf.j2
#     dest: "{{ wireguard_dir }}/{{ wireguard_interface }}.conf"
#     #owner: "{{ wireguard_conf_owner }}"
#     #group: "{{ wireguard_conf_group }}"
#     #mode: "{{ wireguard_conf_mode }}"
#     #no_log: "{{ ansible_verbosity < 3 }}"
#   tags:
#     - wg-config
#   notify:
#     - reconfigure wireguard

# - name: Ensure legacy reload-module-on-update is absent
#   file:
#     dest: "{{ wireguard_dir }}/.reload-module-on-update"
#     state: absent
#   tags:
#     - wg-config

# - name: Start and enable WireGuard service
#   service:
#     name: "wg-quick@{{ wireguard_interface }}"
#     state: "{{ wireguard_service_state }}"
#     enabled: "{{ wireguard_service_enabled }}"
#   when: not ansible_os_family == 'Darwin'

# - name: Add port to public zone
#   firewalld:
#     zone: public
#     port: 51820/tcp
#     permanent: true
#     state: enabled
#   register: firewalld_changed

# - name: Add interface to internal zone
#   firewalld:
#     zone: internal
#     interface: wg0
#     permanent: true
#     state: enabled
#   register: firewalld_changed
    
# - name: Masquerade
#   firewalld:
#     zone: public
#     rich_rule: 'rule family=ipv4 source address=10.8.0.0/24 masquerade'
#     permanent: true
#     state: enabled
#   register: firewalld_changed

# - name: reload service firewalld
#   systemd:
#     name: firewalld
#     state: reloaded
#   when: firewalld_changed is defined

# - name: Cleanup secrets from memory
#   set_fact:
#     _pskkey_value: ""
#     _pubkey_value: ""
#     _privkey_value: ""


# # - name: copy .netdev profiles
# #   template:
# #     src: "systemd-networkd.conf.j2"
# #     dest: "{{ wireguard_systemd_path }}/{{ wireguard_interface }}.netdev"
# #     mode: 0644
# #   vars:
# #     systemd_config: "{{ wireguard_systemd_netdev + (peers | list) }}"
# #   notify:
# #     - reload systemd
# #     - restart systemd-networkd

# # - name: copy .network profiles
# #   template:
# #     src: "systemd-networkd.conf.j2"
# #     dest: "{{ wireguard_systemd_path }}/{{ wireguard_interface }}.network"
# #     mode: 0644
# #   vars:
# #     systemd_config: "{{ wireguard_systemd_network }}"
# #   notify:
# #     - reload systemd
# #     - restart systemd-networkd
